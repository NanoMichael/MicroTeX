/** A C-wrapper for microtex. */

#ifndef MICROTEX_CWRAPPER_H
#define MICROTEX_CWRAPPER_H

#ifdef HAVE_CWRAPPER

#include "microtexexport.h"
#include "wrapper/callback.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef void* FontMetaPtr;
typedef void* RenderPtr;
typedef void* DrawingData;

/** Get the library version. */
MICROTEX_CAPI const char* microtex_version();

/**
 * Register callbacks to the engine.
 *
 * @param createTextLayout callback to create text-layout
 * @param getTextLayoutBounds callback to retrieve the bounds of text-layout created
 * by [createTextLayout]
 * @param releaseTextLayout callback to release a text-layout created by [createTextLayout]
 * @param isPathExists callback to check if a graphical-path is exists
 */
MICROTEX_CAPI void microtex_registerCallbacks(
  CBCreateTextLayout createTextLayout,
  CBGetTextLayoutBounds getTextLayoutBounds,
  CBReleaseTextLayout releaseTextLayout,
  CBIsPathExists isPathExists
);

/** Set text-layout bounds by given width, height, and ascent. For FFI bindings. */
MICROTEX_CAPI void microtex_setTextLayoutBounds(
  TextLayoutBounds* b, float width, float height, float ascent
);

/** Test if a font is bold. For FFI bindings. */
MICROTEX_CAPI bool microtex_isBold(FontDesc* desc);

/** Test if a font is italic. For FFI bindings. */
MICROTEX_CAPI bool microtex_isItalic(FontDesc* desc);

/** Test if a font is sans-serif. For FFI bindings. */
MICROTEX_CAPI bool microtex_isSansSerif(FontDesc* desc);

/** Test if a font is monospace. For FFI bindings. */
MICROTEX_CAPI bool microtex_isMonospace(FontDesc* desc);

/** Retrieve the font size. For FFI bindings. */
MICROTEX_CAPI float microtex_fontSize(FontDesc* desc);

/**
 * Initialize the engine by given `clm` data. The data must represents a math font.
 *
 * @param len the number of bytes of the `clm` data
 * @param data the `clm` data
 * @return the meta info of the font, you can retrieve the font family via
 * [microtex_getFontFamily], the font name via [microtex_getFontName], and to test if
 * the font is a math font by [microtex_isMathFont]. You must call [microtex_releaseFontMeta]
 * after this object has no usages.
 */
MICROTEX_CAPI FontMetaPtr microtex_init(
  unsigned long len,
  const unsigned char* data
);

/** Release the engine. */
MICROTEX_CAPI void microtex_release();

/** Test if the engine is initialized. */
MICROTEX_CAPI bool microtex_isInited();

/**
 * Add a font to the engine context.
 *
 * @param len the number of bytes of the `clm` data
 * @param data the `clm` data
 * @return the font meta info. You must call [microtex_releaseFontMeta] after this object has
 * no usages.
 */
MICROTEX_CAPI FontMetaPtr microtex_addFont(
  unsigned long len,
  const unsigned char* data
);

/** Get the font family name from the given FontMetaPtr. */
MICROTEX_CAPI const char* microtex_getFontFamily(FontMetaPtr ptr);

/** Get the font name from the given FontMetaPtr. */
MICROTEX_CAPI const char* microtex_getFontName(FontMetaPtr ptr);

/** Test if the given font is a math font. */
MICROTEX_CAPI bool microtex_isMathFont(FontMetaPtr ptr);

/** Release the font meta info. */
MICROTEX_CAPI void microtex_releaseFontMeta(FontMetaPtr ptr);

/**
 * Set the default math font by name.
 * See [lib/microtex.h :: MicroTex::setDefaultMathFont] for details.
 */
MICROTEX_CAPI void microtex_setDefaultMathFont(const char* name);

/**
 * Set the default main font family by name.
 * See [lib/microtex.h :: MicroTex::setDefaultMainFont] for details.
 */
MICROTEX_CAPI void microtex_setDefaultMainFont(const char* name);

/**
 * Parse a (La)TeX string (in UTF-8 encoding) to Render.
 * See [lib/microtex.h :: MicroTeX::parse] for details.
 */
MICROTEX_CAPI RenderPtr microtex_parseRender(
  const char* tex,
  int width,
  float textSize,
  float lineSpace,
  unsigned int color,
  bool fillWidth,
  bool enableOverrideTeXStyle,
  unsigned int texStyle
);

/** Delete the render created by [microtex_parseRender] before. */
MICROTEX_CAPI void microtex_deleteRender(RenderPtr render);

/**
 * Get the drawing data from the render created by [microtex_parseRender] before.
 * It generates the drawing commands from the render.
 *
 * TODO
 */
MICROTEX_CAPI DrawingData microtex_getDrawingData(RenderPtr render, int x, int y);

/** Release the drawing data generated by [microtex_getDrawingData] before. */
MICROTEX_CAPI void microtex_freeDrawingData(DrawingData data);

/** Test if the host machine is little-endian. */
MICROTEX_CAPI bool microtex_isLittleEndian();

/** Get the render width. */
MICROTEX_CAPI int microtex_getRenderWidth(RenderPtr render);

/** Get the render height. */
MICROTEX_CAPI int microtex_getRenderHeight(RenderPtr render);

/** Get the render depth. */
MICROTEX_CAPI int microtex_getRenderDepth(RenderPtr render);

/** Test if the render is split (has new line). */
MICROTEX_CAPI bool microtex_isRenderSplit(RenderPtr render);

/** Set the text size to draw the render. */
MICROTEX_CAPI void microtex_setRenderTextSize(RenderPtr render, float size);

/** Set the foreground color to draw the render. */
MICROTEX_CAPI void microtex_setRenderForeground(RenderPtr render, unsigned int c);

#ifdef __cplusplus
}
#endif

#endif // HAVE_CWRAPPER

#endif // MICROTEX_CWRAPPER_H
